diff -rc ns-2.34_original/common/node.cc ns-2.34/common/node.cc
*** ns-2.34_original/common/node.cc	2009-06-14 10:35:45.000000000 -0700
--- ns-2.34/common/node.cc	2009-10-12 18:30:52.000000000 -0700
***************
*** 139,144 ****
--- 139,151 ----
  Node::command(int argc, const char*const* argv)
  {
  	Tcl& tcl = Tcl::instance();
+         // Merged by Will Hrudey, Reza Sahraei
+         // Modified by Tony Feng for BGP.
+         if (strcmp(argv[1], "as") == 0) {
+ 			as_num_ = atoi(argv[2]);
+                         return TCL_OK;
+         }
+         // End Tony Feng
  	if (argc == 2) {
  #ifdef HAVE_STL
  		// Mods for Nix-Vector Routing
***************
*** 214,220 ****
  			}
  			addNeighbor(node);
  			return TCL_OK;
! 		}
  	}
  	return ParentNode::command(argc,argv);
  }
--- 221,237 ----
  			}
  			addNeighbor(node);
  			return TCL_OK;
!                 // Merged by Will Hrudey, Reza Sahraei
! 		} // Modified by Tony Feng for BGP.
!                   else if (strcmp(argv[1], "add-AS-neighbor") == 0) {
!  			Node * node = (Node *)TclObject::lookup(argv[2]);
!   			if (node == 0) {
!   				tcl.resultf("Invalid node %s", argv[2]);
!                                 return (TCL_ERROR);
!  			}
!  			ASnbs.push_back(node);
!  			return TCL_OK;
!  		} // End Tony Feng.
  	}
  	return ParentNode::command(argc,argv);
  }
diff -rc ns-2.34_original/common/node.h ns-2.34/common/node.h
*** ns-2.34_original/common/node.h	2009-06-14 10:35:45.000000000 -0700
--- ns-2.34/common/node.h	2009-10-12 18:49:07.000000000 -0700
***************
*** 59,64 ****
--- 59,66 ----
  #include "energy-model.h"
  #include "location.h"
  #include "rtmodule.h"
+ // Merged by Will Hrudey, Reza Sahraei
+ #include <list>
  
  class NixNode;
  class LinkHead;
***************
*** 130,135 ****
--- 132,139 ----
  
  	inline int address() { return address_;}
  	inline int nodeid() { return nodeid_;}
+         // Merged by Will Hrudey, Reza Sahraei
+  	inline int as_number() { return as_num_; } //Added by Tony Feng
  	inline bool exist_namchan() const { return (namChan_ != 0); }
  
  	virtual int command(int argc, const char*const* argv);
***************
*** 155,160 ****
--- 159,167 ----
  	void addNeighbor(Node *node);
  	
  	static Node* get_node_by_address(nsaddr_t);
+         // Merged by Will Hrudey, Reza Sahraei
+         //AS neighbor list for BGP autoconfig, added by Tony Feng
+         list<Node*> ASnbs;
  	
  	//routines for supporting routing
  	void route_notify (RoutingModule *rtm);
***************
*** 168,173 ****
--- 175,182 ----
  	LIST_ENTRY(Node) entry;  // declare list entry structure
  	int address_;
  	int nodeid_; 		 // for nam use
+         // Merged by Will Hrudey, Reza Sahraei
+  	int as_num_;     // Added by Tony Feng for BGP
  
  	// Nam tracing facility
          Tcl_Channel namChan_;
diff -rc ns-2.34_original/common/packet.h ns-2.34/common/packet.h
*** ns-2.34_original/common/packet.h	2009-06-14 10:35:44.000000000 -0700
--- ns-2.34/common/packet.h	2009-10-12 21:29:17.000000000 -0700
***************
*** 183,189 ****
  static const packet_t PT_AOMDV = 61;
  
          // insert new packet types here
! static packet_t       PT_NTYPE = 62; // This MUST be the LAST one
  
  enum packetClass
  {
--- 183,194 ----
  static const packet_t PT_AOMDV = 61;
  
          // insert new packet types here
! // Merged by Will Hrudey, Reza Sahraei
! static const packet_t PT_RTPROTO_BGP = 62;  // For bgp implementation, added by Tony Feng
! static const packet_t PT_TCPMASTER = 63;
! static const packet_t PT_PEERENTRY = 64; // end Tony Feng
! 
! static packet_t       PT_NTYPE = 65; // This MUST be the LAST one
  
  enum packetClass
  {
***************
*** 303,308 ****
--- 308,317 ----
  		name_[PT_RTCP]= "rtcp";
  		name_[PT_RTP]= "rtp";
  		name_[PT_RTPROTO_DV]= "rtProtoDV";
+                 // Merged by Will Hrudey, Reza Sahraei
+  		name_[PT_RTPROTO_BGP]= "rtProtoBGP"; // For bgp implementation, added by Tony Feng
+  		name_[PT_PEERENTRY]= "PeerEntry";
+  		name_[PT_TCPMASTER]= "tcpmaster"; // end Tony Feng
  		name_[PT_CtrMcast_Encap]= "CtrMcast_Encap";
  		name_[PT_CtrMcast_Decap]= "CtrMcast_Decap";
  		name_[PT_SRM]= "SRM";
diff -rc ns-2.34_original/common/simulator.cc ns-2.34/common/simulator.cc
*** ns-2.34_original/common/simulator.cc	2009-06-14 10:35:44.000000000 -0700
--- ns-2.34/common/simulator.cc	2009-10-12 21:32:01.000000000 -0700
***************
*** 189,195 ****
  				nh = rtobject_->lookup_flat(i, j);
  				if (nh >= 0) {
  					NsObject *l_head = get_link_head(nodelist_[i], nh);
! 					sprintf(tmp, "%d", j);
  					nodelist_[i]->add_route(tmp, l_head);
  				}
  			}  
--- 189,200 ----
  				nh = rtobject_->lookup_flat(i, j);
  				if (nh >= 0) {
  					NsObject *l_head = get_link_head(nodelist_[i], nh);
!                                         // Merged by Will Hrudey, Reza Sahraei
! 					// Modified by Tony Feng. We use the node address instead of node_id.
!                                         Tcl::instance().evalf("[Simulator instance] get-node-by-id %d",j);
!                                         Node * node = (Node*) TclObject::lookup(Tcl::instance().result());
!                                         sprintf(tmp, "%d", node->address());
!                                         // End Tony Feng
  					nodelist_[i]->add_route(tmp, l_head);
  				}
  			} 
diff -rc ns-2.34_original/Makefile.in ns-2.34/Makefile.in
*** ns-2.34_original/Makefile.in	2009-06-14 10:35:44.000000000 -0700
--- ns-2.34/Makefile.in	2009-10-12 21:38:20.000000000 -0700
***************
*** 18,24 ****
  #  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  #
  # @(#) $Header: 2002/10/09 15:34:11
! 
  #
  # Various configurable paths (remember to edit Makefile.in, not Makefile)
  #
--- 18,25 ----
  #  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  #
  # @(#) $Header: 2002/10/09 15:34:11
! # Merged code @ lines 325 to 337 & 529 to 532 by Will Hrudey, Reza Sahraei
! # 
  #
  # Various configurable paths (remember to edit Makefile.in, not Makefile)
  #
***************
*** 321,326 ****
--- 322,340 ----
  	mcast/classifier-lms.o mcast/lms-agent.o mcast/lms-receiver.o \
  	mcast/lms-sender.o \
  	queue/delayer.o \
+    	tcp/tcp_data.o tcp/receive_queue.o tcp/send_queue.o tcp/tcp_master.o tcp/tcp_socket.o \
+   	bgp/Util/bitstring.o bgp/Util/ipaddress.o bgp/Util/stringmanip.o \
+    	bgp/Comm/bgpmessage.o bgp/Comm/keepalivemessage.o bgp/Comm/notificationmessage.o \
+    	bgp/Comm/openmessage.o bgp/Comm/startstopmessage.o bgp/Comm/transportmessage.o \
+    	bgp/Comm/updatemessage.o \
+    	bgp/Timing/bgp_timer.o bgp/Timing/timeoutmessage.o bgp/Timing/mraitimer.o bgp/Timing/mraiperpeertimer.o \
+  	bgp/Path/aggregator.o bgp/Path/aspath.o bgp/Path/atomicaggregate.o \
+  	bgp/Path/attribute.o bgp/Path/clusterlist.o bgp/Path/community.o \
+  	bgp/Path/localpref.o bgp/Path/med.o bgp/Path/nexthop.o \
+  	bgp/Path/originatorid.o bgp/Path/origin.o bgp/Path/segment.o \
+  	bgp/route.o bgp/routeinfo.o \
+  	bgp/ribelement.o bgp/adjribin.o bgp/adjribout.o bgp/locrib.o \
+         bgp/classifier-ipv4.o bgp/classifier-ipv4src.o bgp/peer-entry.o bgp/rtProtoBGP.o \
  	xcp/xcpq.o xcp/xcp.o xcp/xcp-end-sys.o \
  	wpan/p802_15_4csmaca.o wpan/p802_15_4fail.o \
  	wpan/p802_15_4hlist.o wpan/p802_15_4mac.o \
***************
*** 512,517 ****
--- 526,535 ----
  	tcl/lib/ns-srcrt.tcl \
  	tcl/mcast/ns-lms.tcl \
  	tcl/lib/ns-qsnode.tcl \
+  	tcl/bgp/ns-bgp-node.tcl \
+  	tcl/bgp/ns-bgp-peerentry.tcl \
+  	tcl/bgp/ns-rtProtoBGP.tcl \
+  	tcl/bgp/ns-tcpmaster.tcl \
  	@V_NS_TCL_LIB_STL@
  
  $(GEN_DIR)ns_tcl.cc: $(NS_TCL_LIB)
diff -rc ns-2.34_original/routing/route.cc ns-2.34/routing/route.cc
*** ns-2.34_original/routing/route.cc	2009-06-14 10:35:43.000000000 -0700
--- ns-2.34/routing/route.cc	2009-10-12 22:05:04.000000000 -0700
***************
*** 393,406 ****
  {
  	check(src);
  	check(dst);
  	adj_[INDEX(src, dst, size_)].cost = cost;
  }
  void RouteLogic::insert(int src, int dst, double cost, void* entry_)
  {
  	check(src);
  	check(dst);
! 	adj_[INDEX(src, dst, size_)].cost = cost;
! 	adj_[INDEX(src, dst, size_)].entry = entry_;
  }
  
  void RouteLogic::reset(int src, int dst)
--- 393,426 ----
  {
  	check(src);
  	check(dst);
+         // Merged by Will Hrudey, Reza Sahraei
+         // Modified by Tony Feng. check if src and dst come from the same as.
+         // Note that index = nodeid +1.
+         Tcl& tcl = Tcl::instance();
+  	tcl.evalf("[[Simulator instance] get-node-by-id %d] set as_num_",src-1);
+  	int as_num_src = atoi(tcl.result());
+         tcl.evalf("[[Simulator instance] get-node-by-id %d] set as_num_",dst-1);
+  	int as_num_dst = atoi(tcl.result());
+         if (as_num_src == as_num_dst)
+         // End Tony Feng.
  	adj_[INDEX(src, dst, size_)].cost = cost;
  }
  void RouteLogic::insert(int src, int dst, double cost, void* entry_)
  {
  	check(src);
  	check(dst);
!         // Merged by Will Hrudey, Reza Sahraei
!         // Modified by Tony Feng. check if src and dst come from the same AS.
!         Tcl& tcl = Tcl::instance();
!  	tcl.evalf("[[Simulator instance] get-node-by-id %d] set as_num_",src-1);
!  	int as_num_src = atoi(tcl.result());
!         tcl.evalf("[[Simulator instance] get-node-by-id %d] set as_num_",dst-1);
!  	int as_num_dst = atoi(tcl.result());
!         if (as_num_src == as_num_dst) {
! 	   adj_[INDEX(src, dst, size_)].cost = cost;
! 	   adj_[INDEX(src, dst, size_)].entry = entry_;
!         }
!         // End Tony Feng.
  }
  
  void RouteLogic::reset(int src, int dst)
diff -rc ns-2.34_original/routing/rtmodule.cc ns-2.34/routing/rtmodule.cc
*** ns-2.34_original/routing/rtmodule.cc	2009-06-14 10:35:43.000000000 -0700
--- ns-2.34/routing/rtmodule.cc	2009-10-14 21:15:40.000000000 -0700
***************
*** 142,147 ****
--- 142,158 ----
  	bind("classifier_", (TclObject**)&classifier_);
  }
  
+ // Merged by Will Hrudey, Reza Sahraei
+ // Added by Tony Feng for BGP.
+ static class BGPRoutingModuleClass : public TclClass {
+ public:
+  	BGPRoutingModuleClass() : TclClass("RtModule/BGP") {}
+  	TclObject* create(int, const char*const*) {
+  		return ( new BGPRoutingModule );
+  	}
+ } class_bgp_module;	
+ // End Tony Feng. 
+ 
  int RoutingModule::command(int argc, const char*const* argv)
  {
  	Tcl& tcl = Tcl::instance();
***************
*** 509,511 ****
--- 520,546 ----
  		next_rtm_->add_route(dst, target); 
  }
  
+ // Merged by Will Hrudey, Reza Sahraei
+ // Added by Tony Feng for BGP.
+ BGPRoutingModule::BGPRoutingModule() { }         
+  
+ int BGPRoutingModule::command(int argc, const char*const* argv) {
+  	Tcl& tcl = Tcl::instance();
+  	if ( argc == 3 ) {
+  		if ( strcmp(argv[1], "route-notify") == 0 ) {
+  		  Node *node = (Node *)(TclObject::lookup(argv[2]));
+  			if (node == NULL) {
+  				tcl.add_errorf("Invalid node object %s", argv[2]);
+  				return TCL_ERROR;
+  			}
+  			if (node != n_) {
+  				tcl.add_errorf("Node object %s different from n_", argv[2]);
+  				return TCL_ERROR;
+  			}
+  			n_->route_notify(this);
+  			return TCL_OK;
+  		}
+  	}
+  	return (RoutingModule::command(argc, argv));
+ }
+ // End Tony Feng.
diff -rc ns-2.34_original/routing/rtmodule.h ns-2.34/routing/rtmodule.h
*** ns-2.34_original/routing/rtmodule.h	2009-06-14 10:35:43.000000000 -0700
--- ns-2.34/routing/rtmodule.h	2009-10-14 21:19:04.000000000 -0700
***************
*** 67,73 ****
  class Node;
  class VirtualClassifier;
  class DestHashClassifier;
! 
  
  class RoutingModule : public TclObject {
  public:
--- 67,77 ----
  class Node;
  class VirtualClassifier;
  class DestHashClassifier;
! // Merged by Will Hrudey
! // Added by Tony Feng for BGP.
! class IPv4Classifier;
! class rtProtoBGP;
! // End Tony Feng.
  
  class RoutingModule : public TclObject {
  public:
***************
*** 178,181 ****
--- 182,197 ----
  	virtual void add_route(char *dst, NsObject *target){}
  };
  
+ // Merged by Will Hrudey, Reza Sahraei
+ // Added by Tony Feng for BGP.
+ class BGPRoutingModule : public RoutingModule {
+ public:
+         BGPRoutingModule();
+         virtual const char* module_name() const {return "BGP";}
+         virtual int command (int argc, const char* const * argv);
+ protected:
+         IPv4Classifier *classifier_;
+         rtProtoBGP *bgp_agent_;
+ }; 
+ // End Tony Feng.
  #endif //  ns_rtmodule_h
diff -rc ns-2.34_original/tcl/lib/ns-default.tcl ns-2.34/tcl/lib/ns-default.tcl
*** ns-2.34_original/tcl/lib/ns-default.tcl	2009-06-14 10:35:41.000000000 -0700
--- ns-2.34/tcl/lib/ns-default.tcl	2009-10-14 21:21:14.000000000 -0700
***************
*** 1345,1350 ****
--- 1345,1370 ----
  Agent/rtProto/DV set INFINITY		 [Agent set ttl_]
  Agent/rtProto/DV set advertInterval	  2
  
+ # Merged by Will Hrudey, Reza Sahraei
+ # Added by Tony Feng for BGP
+ Agent/rtProto/BGP set connretry_interval_ 120
+ Agent/rtProto/BGP set masoi_ 15
+ Agent/rtProto/BGP set cluster_num 0
+ Agent/rtProto/BGP set bgp_id_ 0
+ Agent/rtProto/BGP set as_num_ 0
+ Agent/rtProto/BGP set auto_config_ false
+ Agent/rtProto/BGP set preference_  80
+  
+ # PeerEntry
+ Agent/PeerEntry set ipaddr_ 0
+ Agent/PeerEntry set as_num_ 0
+ Agent/PeerEntry set bgp_id_ 0
+ Agent/PeerEntry set return_ipaddr_ 0
+ Agent/PeerEntry set hold_time_ 90
+ Agent/PeerEntry set keep_alive_interval_ 30
+ Agent/PeerEntry set mrai_ 30
+ # End Tony Feng
+ 
  Agent/Encapsulator set status_ 1
  Agent/Encapsulator set overhead_ 20
  
diff -rc ns-2.34_original/tcl/lib/ns-lib.tcl ns-2.34/tcl/lib/ns-lib.tcl
*** ns-2.34_original/tcl/lib/ns-lib.tcl	2009-06-14 10:35:41.000000000 -0700
--- ns-2.34/tcl/lib/ns-lib.tcl	2009-10-21 23:12:39.000000000 -0700
***************
*** 229,234 ****
--- 229,243 ----
  }
  
  source ns-qsnode.tcl
+ # Mergedy by Will Hrudey, Reza Sahraei
+ # Added by Tony Feng for BGP
+ source ../bgp/ns-bgp-node.tcl
+ source ../bgp/ns-rtProtoBGP.tcl
+ source ../bgp/ns-bgp-peerentry.tcl
+  
+ #TCPMaster
+ source ../bgp/ns-tcpmaster.tcl
+ # End Tony Feng
  
  # Obsolete modules
  #source ns-wireless-mip.tcl
***************
*** 395,400 ****
--- 404,421 ----
  	}
  }
  
+ # Merged by Will Hrudey, Reza Sahraei
+ # Added by Tony Feng for BGP
+ Simulator instproc BGP { val } { 
+  	if { $val == "ON" } {
+  		Node enable-module BGP
+  		Node disable-module Base
+  	} else {
+  		Node disable-module BGP
+  		Node enable-module Base
+  	}
+ }
+ # End Tony Feng
  
  Simulator instproc PGM { val } { 
          if { $val == "ON" } {
***************
*** 1113,1118 ****
--- 1134,1147 ----
  	# Register this simplex link in nam link list. Treat it as 
  	# a duplex link in nam
  	$self register-nam-linkconfig $link_($sid:$did)
+         # Merged by Will Hrudey, Reza Sahraei
+  	# Added by Tony Feng for BGP.
+  	if { [$n1 set as_num_] != [$n2 set as_num_] } {
+  	# n1 and n2 reside in different AS, add a route to n2 in n1's classifier.
+    		$n1 add-route [$n2 set address_] [[set link_($sid:$did)] set head_]
+    		$n1 cmd add-AS-neighbor $n2
+  	}
+  	# End Tony Feng.
  }
  
  #
diff -rc ns-2.34_original/tcl/lib/ns-node.tcl ns-2.34/tcl/lib/ns-node.tcl
*** ns-2.34_original/tcl/lib/ns-node.tcl	2009-06-14 10:35:41.000000000 -0700
--- ns-2.34/tcl/lib/ns-node.tcl	2009-10-14 21:32:24.000000000 -0700
***************
*** 66,82 ****
  	eval $self next $args
  
          $self instvar id_ agents_ dmux_ neighbor_ rtsize_ address_ \
! 			nodetype_ multiPath_ ns_ rtnotif_ ptnotif_
  
  	set ns_ [Simulator instance]
  	set id_ [Node getid]
  	$self nodeid $id_	;# Propagate id_ into c++ space
  
  	if {[llength $args] != 0} {
! 		set address_ [lindex $args 0]
  	} else {
  		set address_ $id_
  	}
  	$self cmd addr $address_; # Propagate address_ into C++ space
  	#$ns_ add-node $self $id_        
  	set neighbor_ ""
--- 66,97 ----
  	eval $self next $args
  
          $self instvar id_ agents_ dmux_ neighbor_ rtsize_ address_ \
! 			nodetype_ multiPath_ ns_ rtnotif_ ptnotif_ as_num_
  
  	set ns_ [Simulator instance]
  	set id_ [Node getid]
  	$self nodeid $id_	;# Propagate id_ into c++ space
  
+         # Merged by Will Hrudey, Reza Sahraei
+         # Modified by Tony Feng for BGP
  	if {[llength $args] != 0} {
!      		if {[llength $args] == 1} {
! 		set arg_0 [lindex $args 0]
!  			if { [scan $arg_0 "%s" ] != -1 } {
!  				# create node with arg_0 of [as_num:ipaddr] format	 
!  				$self parse-addr $arg_0
!  			} else {
!  				# create node with arg_0 of int value 
!  		  		set address_ $arg_0
! 				set as_num_ 0
!  			}
!      		} 
  	} else {
  		set address_ $id_
+                 set as_num_ 0
  	}
+ 	# End Tony Feng
+ 
  	$self cmd addr $address_; # Propagate address_ into C++ space
  	#$ns_ add-node $self $id_        
  	set neighbor_ ""
diff -rc ns-2.34_original/tcp/rq.cc ns-2.34/tcp/rq.cc
*** ns-2.34_original/tcp/rq.cc	2009-06-14 10:35:44.000000000 -0700
--- ns-2.34/tcp/rq.cc	2009-10-14 21:37:39.000000000 -0700
***************
*** 298,305 ****
   * last seq# number in the segment plus one
   */
  
  TcpFlag
! ReassemblyQueue::add(TcpSeq start, TcpSeq end, TcpFlag tiflags, RqFlag rqflags)
  {
  
  	int needmerge = FALSE;
--- 298,306 ----
   * last seq# number in the segment plus one
   */
  
+ // Merged by Will Hrudey, Reza Sahraei
  TcpFlag
! ReassemblyQueue::add(TcpSeq start, TcpSeq end, TcpFlag tiflags, RqFlag rqflags, AppData* data)
  {
  
  	int needmerge = FALSE;
***************
*** 329,334 ****
--- 330,338 ----
  		head_->rqflags_ = rqflags;
  		head_->cnt_ = initcnt;
  
+                 // Merged by Will Hrudey, Reza Sahraei
+                 head_->data = data; //Added by Zheng Wang for BGP
+ 
  		total_ = (end - start);
  
  		//
***************
*** 500,505 ****
--- 504,512 ----
  		n->prev_ = p;
  		n->next_ = q;
  
+                 // Merged by Will Hrudey, Reza Sahraei
+                 n->data = data; //Added by Zheng Wang for BGP
+ 
  		push(n);
  
  		if (p)
***************
*** 530,535 ****
--- 537,545 ----
  			rcv_nxt_ = end;
  		}
  
+                 // Merged by Will Hrudey, Reza Sahraei
+     	        toReceiveQueue->enqueue((TcpData*)(q->data)); //Added by Zheng Wang for BGP
+ 
  		return tiflags;
  	}
  }
diff -rc ns-2.34_original/tcp/rq.h ns-2.34/tcp/rq.h
*** ns-2.34_original/tcp/rq.h	2009-06-14 10:35:44.000000000 -0700
--- ns-2.34/tcp/rq.h	2009-10-14 21:44:31.000000000 -0700
***************
*** 68,73 ****
--- 68,75 ----
  
  #include <stdio.h>
  #include <stdlib.h>
+ // Merged by Will Hrudey, Reza Sahraei
+ #include "receive_queue.h" //Added by Zheng Wang for BGP
  
  /*
   * ReassemblyQueue: keeps both a stack and linked list of segments
***************
*** 99,111 ****
  		TcpFlag	pflags_;	// flags derived from tcp hdr
  		RqFlag	rqflags_;	// book-keeping flags
  		int	cnt_;		// refs to this block
  	};
  
  public:
  	ReassemblyQueue(TcpSeq& rcvnxt) :
  		head_(NULL), tail_(NULL), top_(NULL), bottom_(NULL), hint_(NULL), total_(0), rcv_nxt_(rcvnxt) { };
  	int empty() { return (head_ == NULL); }
! 	int add(TcpSeq sseq, TcpSeq eseq, TcpFlag pflags, RqFlag rqflags = 0);
  	int maxseq() { return (tail_ ? (tail_->endseq_) : -1); }
  	int minseq() { return (head_ ? (head_->startseq_) : -1); }
  	int total() { return total_; }
--- 101,116 ----
  		TcpFlag	pflags_;	// flags derived from tcp hdr
  		RqFlag	rqflags_;	// book-keeping flags
  		int	cnt_;		// refs to this block
+                 // Merged by Will Hrudey, Reza Sahraei
+                 AppData* data;          // Added by Zheng Wang for BGP
  	};
  
  public:
  	ReassemblyQueue(TcpSeq& rcvnxt) :
  		head_(NULL), tail_(NULL), top_(NULL), bottom_(NULL), hint_(NULL), total_(0), rcv_nxt_(rcvnxt) { };
  	int empty() { return (head_ == NULL); }
!         // Merged by Will Hrudey, Reza Sahraei
! 	int add(TcpSeq sseq, TcpSeq eseq, TcpFlag pflags, RqFlag rqflags = 0, AppData* data = 0); //Modified by Zheng Wang for BGP
  	int maxseq() { return (tail_ ? (tail_->endseq_) : -1); }
  	int minseq() { return (head_ ? (head_->startseq_) : -1); }
  	int total() { return total_; }
***************
*** 121,126 ****
--- 126,133 ----
  	    return (clearto(rcv_nxt_));
  	}
  	void dumplist();	// for debugging
+         // Merged by Will Hrudey, Reza Sahraei
+   	void connRevQueue(ReceiveQueue* revQueue){toReceiveQueue = revQueue;} //Added by Zheng Wang for BGP
  
  	// cache of allocated seginfo blocks
  	static seginfo* newseginfo();
***************
*** 143,148 ****
--- 150,158 ----
  	// within TCP to set rcv_nxt and thus to set the ACK field.  It is also
  	// used in the SACK sender as sack_min_
  
+         // Merged by Will Hrudey, Reza Sahraei
+         ReceiveQueue* toReceiveQueue;  //Added by Zheng Wang for BGP
+ 
  	TcpSeq& rcv_nxt_;	// start seq of next expected thing
  	TcpFlag coalesce(seginfo*, seginfo*, seginfo*);
  	void fremove(seginfo*);	// remove from FIFO
diff -rc ns-2.34_original/tcp/scoreboard-rq.cc ns-2.34/tcp/scoreboard-rq.cc
*** ns-2.34_original/tcp/scoreboard-rq.cc	2009-06-14 10:35:44.000000000 -0700
--- ns-2.34/tcp/scoreboard-rq.cc	2009-10-14 21:46:11.000000000 -0700
***************
*** 84,90 ****
  
  	for(int i = 0 ; i < tcph->sa_length() ; i++){
  		//printf("l: %i r: %i\n", tcph->sa_left(i), tcph->sa_right(i));
! 		rq_.add(tcph->sa_left(i), tcph->sa_right(i), 0); 
  	}
  	changed_ = changed_  || (old_total != rq_.total());
  	return 0;
--- 84,91 ----
  
  	for(int i = 0 ; i < tcph->sa_length() ; i++){
  		//printf("l: %i r: %i\n", tcph->sa_left(i), tcph->sa_right(i));
!                 // Merged by Will Hrudey, Reza Sahraei
! 		rq_.add(tcph->sa_left(i), tcph->sa_right(i), 0, NULL); 
  	}
  	changed_ = changed_  || (old_total != rq_.total());
  	return 0;
diff -rc ns-2.34_original/tcp/tcp-full.cc ns-2.34/tcp/tcp-full.cc
*** ns-2.34_original/tcp/tcp-full.cc	2009-06-14 10:35:44.000000000 -0700
--- ns-2.34/tcp/tcp-full.cc	2009-10-14 22:08:57.000000000 -0700
***************
*** 342,347 ****
--- 342,370 ----
  	return;
  }
  
+ // Merged by Will Hrudey, Reza Sahraei
+ /*
+  * send a string of nBytes, added by Zheng Wang for BGP
+  */
+ void
+ FullTcpAgent::advance_bytes(int nBytes, const char* const data, Continuation* caller)
+ {
+      if (writeCont != NULL){
+        printf("write error - socket already in blocking write\n");
+        if (caller != NULL)
+          caller->failure();
+        return;
+      }
+      if(toSendQueue==NULL)  {
+        toSendQueue = new SendQueue();
+      }
+      if (data!=NULL) {
+        writeCont = caller;
+        toSendQueue->enqueue(nBytes,data);
+      }
+      advance_bytes(nBytes);
+ }
+ 
  /*
   * the byte-oriented interface: advance_bytes(int nbytes)
   */
***************
*** 465,474 ****
--- 488,503 ----
  	case TCPS_LISTEN:
  		cancel_timers();
  		newstate(TCPS_CLOSED);
+                 // Merged by Will Hrudey, Reza Sahraei
+                 if(mySocket) // added by Tony Feng, informs the socket that tcp closed successfully
+                    mySocket->disconnected();
  		finish();
  		break;
  	case TCPS_SYN_SENT:
  		newstate(TCPS_CLOSED);
+                 // Merged by Will Hrudey, Reza Sahraei
+                 if(mySocket) // added by Tony Feng, informs the socket that tcp closed successfully
+                    mySocket->disconnected();
  		/* fall through */
  	case TCPS_LAST_ACK:
  		flags_ |= TF_NEEDFIN;
***************
*** 721,726 ****
--- 750,758 ----
          int tiflags = tcph->flags();
  	int fillshole = (start == rcv_nxt_);
  	int flags;
+ 
+         // Merged by Will Hrudey, Reza Sahraei
+  	AppData* data = pkt->userdata();   //Added by Zheng Wang for BGP
     
  	// end contains the seq of the last byte of
  	// in the packet plus one
***************
*** 731,737 ****
  		abort();
  	}
  
! 	flags = rq_.add(start, end, tiflags, 0);
  
  	//present:
  	//
--- 763,770 ----
  		abort();
  	}
  
!         // Merged by Will Hrudey, Reza Sahraei
! 	flags = rq_.add(start, end, tiflags, 0, data); //Modified by Zheng Wang for BGP
  
  	//present:
  	//
***************
*** 756,761 ****
--- 789,839 ----
          return (flags);
  }
  
+ // Merged by Will Hrudey, Reza Sahraei
+ //Added by Zheng Wang for BGP
+ void FullTcpAgent::read(char* buffer, int nbytes, Continuation* caller)
+ {
+      if (readCont != NULL){
+        printf("read error - socket already in blocking read\n");
+        if (caller != NULL)
+          caller->failure();
+        return;
+      }
+  
+      // if requested data is in the buffer, get it from buffer
+      // We use the fact that a data object arrives in the first TCP segment.
+      if(nbytes <= dataReceived) {
+        dataReceived -= nbytes;
+        if(toReceiveQueue->is_empty()) {
+  	      printf("receive queue is empty, exit\n");
+     	    return;
+        }
+        toReceiveQueue->retrieve_data(nbytes,buffer);
+  	    caller->success();
+      } else {
+        inbuffer = buffer;
+        readCont = caller;
+        readSize = nbytes;
+      }
+  }
+  
+ void FullTcpAgent::recvBytes(int bytes)
+  {
+      dataReceived+= bytes;
+      if((readCont != NULL) && (dataReceived >= readSize)) {
+  	    toReceiveQueue->retrieve_data(readSize,inbuffer);
+  	    mySocket->appCallWaiting = false;
+        //mySocket->app_call_waiting = NULL;
+        dataReceived -= readSize;
+        Continuation* rc = readCont;
+        readCont = NULL;
+        rc->success();
+  
+      }
+      Agent::recvBytes(bytes);
+  } 
+ // End Zheng Wang
+ 
  /*
   * utility function to set rcv_next_ during inital exchange of seq #s
   */
***************
*** 915,920 ****
--- 993,1011 ----
  //prpkt(p);
  //}
  
+         // Merged by Will Hrudey, Reza Sahraei
+  	//Added by Zheng Wang for BGP
+  		//Set data field
+  		if(toSendQueue)
+  		{
+  			if(!toSendQueue->is_empty())
+  			{
+  				TcpData* pData = toSendQueue->get_data(seqno,datalen);
+  				p->setdata(pData);
+  			}
+  		}
+  	//End Zheng Wang
+ 
  	send(p, 0);
  
  	return;
***************
*** 1299,1304 ****
--- 1390,1404 ----
  
  	if (ackno == maxseq_) {
  		cancel_rtx_timer();	// all data ACKd
+                 // Merged by Will Hrudey, Reza Sahraei
+ 	        // Added by Tony Feng for Socket::wirte()
+                 if(writeCont != NULL) {
+                    Continuation *  app_call_waiting = writeCont;
+                    writeCont = NULL;
+                    mySocket->appCallWaiting = false;
+                    app_call_waiting->success();
+                 }  
+                 // End Tony Feng
  	} else if (progress) {
  		set_rtx_timer();
  	}
***************
*** 1640,1645 ****
--- 1740,1749 ----
  			//	changes DELACK to ACKNOW and calls tcp_output()
  			rcv_nxt_ += datalen;
  			flags_ |= TF_DELACK;
+ 
+                         // Merged by Will Hrudey, Reza Sahraei
+ 			toReceiveQueue->enqueue((TcpData*)pkt->userdata()); // Added by Zheng Wang for BGP
+ 
  			recvBytes(datalen); // notify application of "delivery"
  			//
  			// special code here to simulate the operation
***************
*** 1722,1728 ****
  			fid_ = iph->flowid();
  		}
  
! 		newstate(TCPS_SYN_RECEIVED);
  		goto trimthenstep6;
  
          /*
--- 1826,1842 ----
  			fid_ = iph->flowid();
  		}
  
!                 // Merged by Will Hrudey, Reza Sahraei
! 		//Modified by Zheng Wang
!  		if( mySocket!=NULL && mySocket->isListening) {
!                         hdr_ip* iph1 = hdr_ip::access(pkt);
!                         //Received SYN for listening tcp, we create a new reading socket.
!  		        tcpMaster->newInComing(pkt,mySocket);
!                         return;
!  		} else {
! 			newstate(TCPS_SYN_RECEIVED);
!                 }
! 		// End Zheng Wang
  		goto trimthenstep6;
  
          /*
***************
*** 1832,1837 ****
--- 1946,1956 ----
  				flags_ &= ~TF_NEEDFIN;
  				tiflags &= ~TH_SYN;
  			} else {
+                                 // Merged by Will Hrudey, Reza Sahraei
+                                 //Added by Zheng Wang
+                                 if (mySocket) 
+  			            mySocket->connected();
+                                 //End Zheng Wang
  				newstate(TCPS_ESTABLISHED);
  			}
  
***************
*** 2092,2097 ****
--- 2211,2218 ----
  			newstate(TCPS_FIN_WAIT_1);
                          flags_ &= ~TF_NEEDFIN;
                  } else {
+                         // Merged by Will Hrudey, Reza Sahraei
+                         mySocket->listeningSocket->addConnection(mySocket); //Added by Zheng Wang for BGP
                          newstate(TCPS_ESTABLISHED);
                  }
  
***************
*** 2335,2340 ****
--- 2456,2467 ----
  		case TCPS_CLOSING:	/* simultaneous active close */;
  			if (ourfinisacked) {
  				newstate(TCPS_CLOSED);
+                                 // Merged by Will Hrudey, Reza Sahraei
+                                 // Added by Tony Feng for BGP
+                                 if(mySocket)  {
+                                      mySocket->disconnected(); // Informs the socket that tcp closed successfully
+                                 }
+                                 // End Tony Feng
  				cancel_timers();
  			}
  			break;
***************
*** 2348,2353 ****
--- 2475,2486 ----
  			// K: added state change here
  			if (ourfinisacked) {
  				newstate(TCPS_CLOSED);
+                                 // Merged by Will Hrudey, Reza Sahraei
+                                 // Added by Tony Feng for BGP
+                                 if(mySocket)  {
+                                      mySocket->disconnected(); // Informs the socket that tcp closed successfully
+                                 }
+                                 // End Tony Feng
  				finish(); // cancels timers, erc
  				reset(); // for connection re-use (bug fix from ns-users list)
  				goto drop;
***************
*** 2635,2641 ****
  	 * Due to F. Hernandez-Campos' fix in recv(), we may send an ACK
  	 * while in the CLOSED state.  -M. Weigle 7/24/01
  	 */
! 	if (state_ == TCPS_LISTEN) {
  	 	// shouldn't be getting timeouts here
                  if (debug_) {
  		        fprintf(stderr, "%f: FullTcpAgent(%s): unexpected timeout %d in state %s\n",
--- 2768,2775 ----
  	 * Due to F. Hernandez-Campos' fix in recv(), we may send an ACK
  	 * while in the CLOSED state.  -M. Weigle 7/24/01
  	 */
!         // Merged by Will Hrudey, Reza Sahraei
! 	if (state_ == TCPS_LISTEN && (mySocket==NULL || !mySocket->isListening)) { // Modified by Tony Feng for BGP
  	 	// shouldn't be getting timeouts here
                  if (debug_) {
  		        fprintf(stderr, "%f: FullTcpAgent(%s): unexpected timeout %d in state %s\n",
diff -rc ns-2.34_original/tcp/tcp-full.h ns-2.34/tcp/tcp-full.h
*** ns-2.34_original/tcp/tcp-full.h	2009-06-14 10:35:44.000000000 -0700
--- ns-2.34/tcp/tcp-full.h	2009-10-14 22:16:07.000000000 -0700
***************
*** 39,44 ****
--- 39,52 ----
  
  #include "tcp.h"
  #include "rq.h"
+ // Merged by Will Hrudey, Reza Sahraei
+ //Added by Zheng Wang
+ #include "send_queue.h"
+ #include "receive_queue.h"
+ #include "tcp_socket.h"
+ #include "tcp_master.h"
+ #include "continuation.h"
+ //End Zheng Wang
  
  /*
   * most of these defines are directly from
***************
*** 114,137 ****
  };
  
  class FullTcpAgent : public TcpAgent {
  public:
  	FullTcpAgent() :
  		closed_(0), pipe_(-1), rtxbytes_(0), fastrecov_(FALSE),
          	last_send_time_(-1.0), infinite_send_(FALSE), irs_(-1),
          	delack_timer_(this), flags_(0),
          	state_(TCPS_CLOSED), recent_ce_(FALSE),
-         	last_state_(TCPS_CLOSED), rq_(rcv_nxt_), last_ack_sent_(-1) { }
  
! 	~FullTcpAgent() { cancel_timers(); rq_.clear(); }
  	virtual void recv(Packet *pkt, Handler*);
  	virtual void timeout(int tno); 	// tcp_timers() in real code
  	virtual void close() { usrclosed(); }
  	void advanceby(int);	// over-rides tcp base version
  	void advance_bytes(int);	// unique to full-tcp
          virtual void sendmsg(int nbytes, const char *flags = 0);
          virtual int& size() { return maxseg_; } //FullTcp uses maxseg_ for size_
  	virtual int command(int argc, const char*const* argv);
         	virtual void reset();       		// reset to a known point
  protected:
  	virtual void delay_bind_init_all();
  	virtual int delay_bind_dispatch(const char *varName, const char *localName, TclObject *tracer);
--- 122,181 ----
  };
  
  class FullTcpAgent : public TcpAgent {
+ // Merged by Will Hrudey, Reza Sahraei
+ friend class TcpMaster;
  public:
  	FullTcpAgent() :
  		closed_(0), pipe_(-1), rtxbytes_(0), fastrecov_(FALSE),
          	last_send_time_(-1.0), infinite_send_(FALSE), irs_(-1),
          	delack_timer_(this), flags_(0),
          	state_(TCPS_CLOSED), recent_ce_(FALSE),
  
!                 // Merged by Will Hrudey, Reza Sahraei
!         	last_state_(TCPS_CLOSED), rq_(rcv_nxt_), last_ack_sent_(-1)
!                 {   // Modified by Zheng Wang for BGP
!       		    toSendQueue = new SendQueue();
!  	            toReceiveQueue = new ReceiveQueue();
!        		    rq_.connRevQueue(toReceiveQueue);
!  	            dataReceived = 0;
!                     readCont = NULL;
!                     writeCont = NULL;
!        		} 
!  
!  	~FullTcpAgent()
!                {    cancel_timers();
!                     rq_.clear();      
!                     if(toSendQueue)
!  			 delete toSendQueue;
!  		    if(toReceiveQueue)
!  			 delete toReceiveQueue;
!                }    // End Zheng Wang
! 
  	virtual void recv(Packet *pkt, Handler*);
  	virtual void timeout(int tno); 	// tcp_timers() in real code
  	virtual void close() { usrclosed(); }
  	void advanceby(int);	// over-rides tcp base version
  	void advance_bytes(int);	// unique to full-tcp
+ 
+         // Merged by Will Hrudey, Reza Sahraei
+   	// Added by Zheng Wang for BGP
+  	void advance_bytes(int nBytes, const char* const data, Continuation* caller);
+   	void recvBytes(int bytes);  // Overrides Agent's recvBytes();
+   	void read(char* buffer, int nbytes, Continuation* caller);
+  	// End Zheng Wang
+ 
          virtual void sendmsg(int nbytes, const char *flags = 0);
          virtual int& size() { return maxseg_; } //FullTcp uses maxseg_ for size_
  	virtual int command(int argc, const char*const* argv);
         	virtual void reset();       		// reset to a known point
+ 
+         // Merged by Will Hrudey, Reza Sahraei
+  	// Added by Zheng Wang
+  	ReceiveQueue* getRevQueue() {return toReceiveQueue;}
+         TcpSocket* mySocket;
+         TcpMaster* tcpMaster;
+  	// End Zheng Wang
+ 
  protected:
  	virtual void delay_bind_init_all();
  	virtual int delay_bind_dispatch(const char *varName, const char *localName, TclObject *tracer);
***************
*** 243,248 ****
--- 287,304 ----
  	double recent_;		// ts on SYN written by peer
  	double recent_age_;	// my time when recent_ was set
  
+         // Merged by Will Hrudey, Reza Sahraei
+  	// Added by Zheng Wang for BGP
+  	SendQueue* toSendQueue;
+  	ReceiveQueue* toReceiveQueue;
+  	int dataReceived;
+  	Continuation* readCont;
+         Continuation* writeCont;
+  	int readSize;
+         int writeSize;
+  	char* inbuffer;
+  	// End Zheng Wang
+ 
  	/*
  	 * setting iw, specific to tcp-full, called
  	 * by TcpAgent::reset()

